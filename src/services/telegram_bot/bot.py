from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.types import WebhookInfo, BotCommand
from aiogram import types
from aiogram import F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, StatesGroup, State
from aiogram.utils.markdown import hbold
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage

from loguru import logger
import config


class KufarSearch(StatesGroup):
    setting_links = State()
    setting_interval = State()


class TelegramBot:
    def __init__(self, token: str, base_url: str, webhook_path: str, secret_token: str, debug: bool = False):
        self.bot = Bot(token=token, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.router = Router(name="telegram")
        self.dp.include_router(self.router)
        self.base_url = base_url
        self.webhook_path = webhook_path
        self.secret_token = secret_token
        self.debug = debug

    async def check_webhook(self) -> WebhookInfo | None:
        try:
            webhook_info = await self.bot.get_webhook_info()
            return webhook_info
        except Exception as e:
            logger.error(f"Can't get webhook info - {e}")
            return

    async def set_webhook(self) -> None:
        current_webhook_info = await self.check_webhook()
        if self.debug:
            logger.debug(f"Current bot info: {current_webhook_info}")
        try:
            await self.bot.set_webhook(
                f"{self.base_url}{self.webhook_path}",
                secret_token=self.secret_token,
                drop_pending_updates=current_webhook_info.pending_update_count > 0,
            )
            if self.debug:
                logger.debug(f"Updated bot info: {await self.check_webhook()}")
        except Exception as e:
            logger.error(f"Can't set webhook - {e}")

    async def set_bot_commands_menu(self) -> None:
        commands = [
            BotCommand(command="/id", description="üëã Get my ID"),
        ]
        try:
            await self.bot.set_my_commands(commands)
        except Exception as e:
            logger.error(f"Can't set commands - {e}")

    async def start(self):
        await self.set_webhook()
        # await self.set_bot_commands_menu()


tg_bot = TelegramBot(token=config.TG_TOKEN,
                     base_url=config.BASE_WEBHOOK_URL,
                     webhook_path=config.TG_WEBHOOK_PATH,
                     secret_token=config.TG_MY_TOKEN,
                     debug=config.DEBUG, )


@tg_bot.router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    kb = [
        [
            types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏"),
            types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏")
        ],
        [
            types.KeyboardButton(text="–ò–Ω—Ç–µ—Ä–≤–∞–ª"),
            types.KeyboardButton(text="–°—Ç–∞—Ä—Ç")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        row_width=2,
        input_field_placeholder="–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª"
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}! –ù–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ç–æ–≤–∞—Ä / —É–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –∫–æ—Ç–æ—Ä—ã–º –º–Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
        reply_markup=keyboard)


@tg_bot.router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏")
async def hello(message: types.Message, state: FSMContext) -> None:
    try:
        await message.answer(text="–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–º–µ—Ç–∫–∏ –∫ –Ω–∏–º, —Ä–µ–∑–¥–µ–ª—è—è –∏—Ö –¥–≤–æ–π–Ω—ã–º –¥–≤–æ–µ—Ç–æ—á–∏–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:\n"
                                  "—Ç–æ–≤–∞—Ä 1::—Å—Å—ã–ª–∫–∞, —Ç–æ–≤–∞—Ä 2::—Å—Å—ã–ª–∫–∞")
        await state.set_state(KufarSearch.setting_links)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏"

    except Exception as e:
        logger.error(f"Can't send message - {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


def check_links_format(links: str):
    parsed_links_dict = {}
    try:
        if links.find(','):
            separated_links = links.split(',')
            for link in separated_links:
                parsed_link = link.split('::')
                parsed_links_dict[parsed_link[0]] = parsed_link[1]

        else:
            parsed_link = links.split('::')
            parsed_links_dict[parsed_link[0]] = parsed_link[1]
    except Exception as e:
        logger.error(f"Can't parse links - {e}")
        return {}
    return parsed_links_dict


@tg_bot.router.message(KufarSearch.setting_links, F.text)
async def set_links(message: Message, state: FSMContext):
    if parsed_links_dict := check_links_format(message.text):
        logger.debug(parsed_links_dict)
        await message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫–∏")

    else:
        await message.answer(text="–°—Å—ã–ª–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    await state.clear()


@tg_bot.router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏")
async def reset_links(message: Message, state: FSMContext):
    try:
        await message.answer(text="–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.error(f"Can't send message - {e}")


@tg_bot.router.message(F.text == "–ò–Ω—Ç–µ—Ä–≤–∞–ª")
async def set_interval(message: types.Message, state: FSMContext) -> None:
    try:
        await message.answer(text="–ù–∞–ø–∏—à–∏ —Å –∫–∞–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")
        await state.set_state(KufarSearch.setting_interval)

    except Exception as e:
        logger.error(f"Can't send message - {e}")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@tg_bot.router.message(KufarSearch.setting_interval, F.text)
async def unset_interval(message: Message, state: FSMContext):
    if message.text.isdecimal() and int(message.text) > 0:
        await message.answer(text=f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {hbold(message.text)} —Å–µ–∫—É–Ω–¥")
    else:
        await message.answer(text="–ß–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ")
    await state.clear()


@tg_bot.router.message(F.text == "–°—Ç–∞—Ä—Ç")
async def start(message: Message):
    try:
        await message.answer(text=hbold("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω"))
    except Exception as e:
        logger.error(f"Can't send message - {e}")
